import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Component, OnInit } from '@angular/core';
import { UploadEvent, UploadFile, FileSystemDirectoryEntry, FileSystemFileEntry } from 'ngx-file-drop';


@Component({
  selector: 'dproz-experience',
  templateUrl: './dproz-experience.component.html',
  styleUrls: ['./dproz-experience.component.scss']
})
export class DprozExperienceComponent implements OnInit {

  experienceForm : FormGroup;
  hide = true;
  editForm:boolean = false;
  token = "mrisho";
  afuConfig = {
    multiple: true,
    formatsAllowed: ".jpg,.png",
    maxSize: "3",
    uploadAPI:  {
      url:"https://example-file-upload-api",
      headers: {
     "Content-Type" : "text/plain;charset=UTF-8",
     "Authorization" : `Bearer ${this.token}`
      }
    },
    theme: "dragAndDrop",
    hideProgressBar: false,
    hideResetBtn: true,
    hideSelectBtn: false
};



public files: UploadFile[] = [];
public urls = [];
 
  public dropped(event: UploadEvent) {
    this.files = event.files;
    for (const droppedFile of event.files) {
      
      // Is it a file?
      if (droppedFile.fileEntry.isFile) {
        const fileEntry = droppedFile.fileEntry as FileSystemFileEntry;
        fileEntry.file((file: File) => {
          console.log(fileEntry.file.name);
          
          var reader = new FileReader();

          reader.readAsDataURL(file); // read file as data url
    
          // Here you can access the real file
          droppedFile.fileEntry.name;

          reader.onload = (event) => { // called once readAsDataURL is completed
            this.urls.push(event.target.result);
          }
        
          console.log(droppedFile.relativePath, file);
 
          /**
          // You could upload it like this:
          const formData = new FormData()
          formData.append('logo', file, relativePath)
 
          // Headers
          const headers = new HttpHeaders({
            'security-token': 'mytoken'
          })
 
          this.http.post('https://mybackend.com/api/upload/sanitize-and-save-logo', formData, { headers: headers, responseType: 'blob' })
          .subscribe(data => {
            // Sanitized logo returned from backend
          })
          **/
 
        });
      } else {
        // It was a directory (empty directories are added, otherwise only files)
        const fileEntry = droppedFile.fileEntry as FileSystemDirectoryEntry;
        console.log(droppedFile.relativePath, fileEntry);
      }
    }
  }

  removeImage(img)
  {
    const i = this.urls.indexOf(img);
    if(i != -1)
    {
      this.urls.splice(i, 1);
      this.files.splice(i, 1);
    }
    console.log(img);
    this.urls
  }
  public fileOver(event){
    console.log(event);
  }
 
  public fileLeave(event){
    console.log(event);
  }

  
  constructor(private fb: FormBuilder) { 

    this.experienceForm = fb.group({
      'projectDetails' : fb.group({
        'projectName' : ['', Validators.required],
        'projectDescription' : ['', Validators.required],
        'startDate' : ['', Validators.required],
        'endDate' : ['', Validators.required],
      }),
      'clientDetails': fb.group({
        'customerNames' : ['', Validators.required],
        'phoneNumber' : ['', Validators.required],
        'emailAddress' : ['', Validators.required],
        'allowContact' : ['', Validators.required],
      }),
     
    });

   

    //console.log(this.experienceForm.value());

  }

  onFileChanged(event)
  {
    console.log(event);
  }

  addExperience()
  {
    this.editForm = true;
  }

  saveForm()
  {
    this.editForm = false;
  }

  editExperience()
  {
    this.editForm = true;
  }

  ngOnInit() {
  }

}



<div *ngIf="editForm">
<form [formGroup]="experienceForm"><div class="form-container">
  <!-- <mat-card class="example-card">
    
              <mat-card-content> -->
                  <button *ngIf="false" mat-raised-button (click)="isLinear = !isLinear" id="toggle-linear">
                      {{!isLinear ? 'Enable linear mode' : 'Disable linear mode'}}
                    </button>
                    <mat-horizontal-stepper [linear]="isLinear" #stepper>
                      <mat-step [stepControl]="projectDetails">
                        <div formGroupName="projectDetails" class="form-container">
                          <ng-template matStepLabel>Fill out Project Details</ng-template>
                          <mat-form-field >
                              <mat-label>Project Name</mat-label>
                              <input matInput formControlName="projectName" placeholder="Enter Project Name">
                              <mat-error *ngIf="!experienceForm.controls['projectDetails'].controls['projectName'].valid">project name is required</mat-error>
                              <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>
                              <mat-hint>project name</mat-hint>
                            </mat-form-field>
                          
                      
                            
                         
                            <mat-form-field >
                              <mat-label>Start Date</mat-label>
                              <input matInput formControlName="startDate" [matDatepicker]="startDate" placeholder="Choose start date">
                              <mat-datepicker-toggle matSuffix [for]="startDate"></mat-datepicker-toggle>
                              <mat-datepicker #startDate></mat-datepicker>
                              <mat-error *ngIf="!experienceForm.controls['projectDetails'].controls['startDate'].valid">start date is required</mat-error>
                              <mat-hint>start date</mat-hint>
                            </mat-form-field>
                          
                      
                      
                            <mat-form-field>
                              <mat-label>End Date</mat-label>
                              <input matInput formControlName="endDate" [matDatepicker]="endDate" placeholder="Choose end date">
                              <mat-datepicker-toggle matSuffix [for]="endDate"></mat-datepicker-toggle>
                              <mat-datepicker #endDate></mat-datepicker>
                              <mat-error *ngIf="!experienceForm.controls['projectDetails'].controls['endDate'].valid">end date is required</mat-error>
                              <mat-hint>end date</mat-hint>
                            </mat-form-field>
                      
                      
                        
                            <mat-form-field >
                              <mat-label>Project Description</mat-label>
                              <textarea matInput formControlName="projectDescription" placeholder="Enter Project Description"></textarea>
                              <mat-error *ngIf="!experienceForm.controls['projectDetails'].controls['projectName'].valid">project description is required</mat-error>
                              <mat-icon matSuffix>adjust</mat-icon>
                              <mat-hint>project description</mat-hint>
                            </mat-form-field>
                          </div>
                          <div style="float:right;">
                              <button mat-button matStepperNext>Next</button>
                            </div>
                      </mat-step>
                      <mat-step [stepControl]="clientDetails">
                        <div formGroupName="clientDetails" class="form-container">
                          <ng-template matStepLabel>Fill out Cleint Details</ng-template>
                         
                          <mat-form-field >
                              <mat-label>Client Name</mat-label>
                              <input matInput formControlName="customerNames" placeholder="Enter Client Name">
                              <mat-error *ngIf="!experienceForm.controls['clientDetails'].controls['customerNames'].valid">client name is required</mat-error>
                              <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>
                              <mat-hint>Client name</mat-hint>
                            </mat-form-field>
                          
                            <mat-form-field >
                                <mat-label>Phone Number</mat-label>
                                <input matInput formControlName="customerNames" placeholder="Enter Phone Number">
                                <mat-error *ngIf="!experienceForm.controls['clientDetails'].controls['customerNames'].valid">phone number is required</mat-error>
                                <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>
                                <mat-hint>phone number</mat-hint>
                              </mat-form-field>
                      
                              <mat-form-field >
                                  <mat-label>Email Address</mat-label>
                                  <input matInput formControlName="customerNames" placeholder="Enter Email Address">
                                  <mat-error *ngIf="!experienceForm.controls['clientDetails'].controls['emailAddress'].valid">email address is required</mat-error>
                                  <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>
                                  <mat-hint>email address</mat-hint>
                                </mat-form-field>
                      
                                <mat-checkbox formControlName="allowContact">Allow customer to contact client</mat-checkbox>
                        
                          
                       
                       
                        </div>
                         
                        <div style="float:right;">
                            <button mat-button matStepperPrevious>Back</button>
                            <button mat-button matStepperNext>Next</button>
                          </div>
                      </mat-step>
                      <mat-step>
                        <ng-template matStepLabel>Upload Photos</ng-template>
                        <div style="width:100%; clear:both;">

                            <div class="center">
                                <file-drop headertext="Drop files here" (onFileDrop)="dropped($event)" 
                                (onFileOver)="fileOver($event)" (onFileLeave)="fileLeave($event)">
                                    <span>Drag and Drop your Images here</span>
                                </file-drop>
                                <div class="upload-table">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Project Photos</th>
                                            </tr>
                                        </thead>
                                        <tbody class="upload-name-style">
                                          <tr>
<td>
    
</td>
                                          </tr>
                                            
                                            <!-- <tr *ngFor="let item of files; let i=index">
                                                <td>
                                                   
                                                  <strong>
                                                    
                                                  {{item.relativePath}}</strong></td>
                                            </tr> -->
                                        </tbody>
                                    </table>
                                    <div *ngFor="let item of urls; let i=index" style="float:left; width:200px; padding: 10px;">
                                        <div style="float:right; margin: 10px 0px;"><button mat-icon-button (click)="removeImage(item)"> 
                                          <mat-icon>delete</mat-icon></button></div>
                                          <div style="margin: 10px 0px;">
                                              <img width="90%" mat-card-image [src]=item alt="Photo of a Shiba Inu">
                                          </div>
                                   
                                    </div>
                                </div>
                            </div>
                            
                            <!-- <div [fileUploadInputFor]="fileUploadQueue" class="upload-drop-zone">
                                Just drag and drop files here
                            </div>
                             
                            <div>
                            <label for="singleFile">Upload file</label>
                            <input id="singleFile" type="file" [fileUploadInputFor]= "fileUploadQueue"/>
                          </div>

                            <div style="width: 500px">
                                <mat-file-upload-queue #fileUploadQueue
                                    [fileAlias]="'file'"
                                    [httpUrl]="'http://localhost:8180/jax-rs-jersey-application-sample'" multiple>
                                
                                    <mat-file-upload [file]="file" [id]="i" *ngFor="let file of fileUploadQueue.files; let i = index"></mat-file-upload>
                                </mat-file-upload-queue>
                            </div> -->
                            <angular-file-uploader 
                            [config]="afuConfig"
                            [resetUpload]=resetVar
                            (ApiResponse)="onFileChanged($event)">
                      </angular-file-uploader>
                            <!-- <input 
                            style="display: none" 
                            type="file" #image accept="image/*"  (change)="onFileChanged($event)">
                          <button (click)="image.click()">Select File</button>
                          <button (click)="onUpload()">Upload!</button> -->
                          </div>
                        <div style="width:50%; float:left;">
<!-- <img mat-card-image src="https://material.angular.io/assets/img/examples/shiba2.jpg" alt="Photo of a Shiba Inu"> -->
                        </div> <div style="width:50%; float:right;">
                        
                        </div>
                       <div style="width:100%; clear:both;">

                          Other Photos
                        </div>
                        <div style="float:right;">
                          <button mat-button matStepperPrevious>Back</button>
                          <button mat-button (click)="stepper.reset()">Reset</button>
                          <button mat-button (click)="saveForm()">Submit</button>
                        </div>
                      </mat-step>
                    </mat-horizontal-stepper>
                

    
   
    
  
  <!-- </mat-card-content></mat-card> --></div>
</form>
</div>
<div *ngIf="!editForm">
    <div style="float:left; color: 	#50B2EC;">
        Click the (+) Sign to Add Experience
        </div>
    <div style="float:right;">
        <button mat-icon-button (click)="addExperience()">
          <mat-icon>add</mat-icon></button>
        </div>
<div>
<div>
    <br>
     <br>
  <mat-card-subtitle style="font-size: 17px">Chakula</mat-card-subtitle>
<mat-card-subtitle>Wali</mat-card-subtitle><div style="float:right; clear: both;"><button mat-icon-button (click)="editExperience()"> 
<mat-icon>edit</mat-icon></button></div>
   <p>
      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.
      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally
      bred for hunting.
   </p>
   <mat-card-subtitle>Ugali</mat-card-subtitle><div style="float:right"><button mat-icon-button (click)="editExperience()"> <mat-icon>edit</mat-icon></button></div>
    <p>
       The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.
       A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally
       bred for hunting.
    </p>
 </div><hr/>

  <div>
  <mat-card-subtitle style="font-size: 17px">Biashara ya pili</mat-card-subtitle>
  <mat-card-subtitle>
      Mboga
    </mat-card-subtitle><div style="float:right"><button mat-icon-button (click)="editExperience()"> <mat-icon>edit</mat-icon></button></div>
      <p>
         The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.
         A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally
         bred for hunting.
      </p>
    </div><hr/>
    <div>
    <mat-card-subtitle style="font-size: 17px">biashara ya tatu</mat-card-subtitle>
    <mat-card-subtitle>
      Madawa
    </mat-card-subtitle><div style="float:right"><button mat-icon-button (click)="editExperience()"> <mat-icon>edit</mat-icon></button></div>
        <p>
           The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.
           A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally
           bred for hunting.
        </p>
      </div><hr/></div></div>